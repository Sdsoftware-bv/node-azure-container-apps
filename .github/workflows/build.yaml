name: Build and Deploy
on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  RESOURCE_GROUP: test-azure-container-apps
  IMAGE_NAME: ${{ github.repository }}
  
jobs:
  build:
    name: üõ† Build
    runs-on: ubuntu-latest
    permissions:
      packages: write
    outputs:
      containerImage-expressapp: ${{ steps.image-tag.outputs.image-my-express-app }}
    steps:
      - name: ‚öô Checkout repository
        uses: actions/checkout@v2

      - name: ‚öô Login to registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚öô Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/my-express-app
          tags: |
            type=ref,event=branch
            type=sha

      - name: üõ† Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./src/express-app
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: üèÅ Output image tag
        id: image-tag
        run: echo "::set-output name=image-my-express-app::${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/my-express-app:sha-$(git rev-parse --short HEAD)" | tr '[:upper:]' '[:lower:]'
  
  
  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: ‚öô Checkout repository
        uses: actions/checkout@v2
        
      - name: ‚öô Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üöÄ Deploy bicep
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az group create -g ${{ env.RESOURCE_GROUP }} -l northeurope
            az deployment group create -g ${{ env.RESOURCE_GROUP }} -f ./deploy/main.bicep \
             -p \
                minReplicas=0 \
                nodeImage='${{ needs.build.outputs.containerImage-expressapp }}' \
                nodePort=3000 \
                containerRegistry=${{ env.REGISTRY }} \
                containerRegistryUsername=${{ github.actor }} \
                containerRegistryPassword=${{ secrets.PACKAGES_TOKEN }}

